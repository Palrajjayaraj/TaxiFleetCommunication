@startuml DashboardServiceSequence

actor "Fleet Management Team" as FleetTeam
participant "Dashboard" as Dashboard
participant "DashboardService" as DashboardService
participant "BookingCenter" as BookingCenter
participant "TaxiFleet" as TaxiFleet
participant "PersistenceService" as PersistenceService


== Initial UI Rendering ==

FleetTeam -> Dashboard : renderInitialDashboard()
Dashboard -> DashboardService : generateBookingStats(filters)
DashboardService -> BookingCenter : queryBooking(filters)
BookingCenter -> PersistenceService : getBookings(filters)
PersistenceService -> BookingCenter : Collection<Booking>
BookingCenter -> DashboardService : Collection<Booking>
DashboardService -> Dashboard : displayBookingStats(Collection<Booking>)

Dashboard -> DashboardService : generateTaxiStats(filters)
DashboardService -> TaxiFleet : queryTaxis(filters)
TaxiFleet -> PersistenceService : getTaxis(filters)
PersistenceService -> TaxiFleet : Collection<Taxi>
TaxiFleet -> DashboardService : Collection<Taxi>
DashboardService -> Dashboard : displayTaxiStats(Collection<Taxi>)

== Fleet Management Updates Filters ==

FleetTeam -> Dashboard : updatesFilters(newFilters)
Dashboard -> DashboardService : generateBookingStats(filters)
DashboardService -> BookingCenter : queryBooking(filters)
BookingCenter -> PersistenceService : getBookings(filters)
PersistenceService -> BookingCenter : Collection<Booking>
BookingCenter -> DashboardService : Collection<Booking>
DashboardService -> Dashboard : displayBookingStats(Collection<Booking>)

Dashboard -> DashboardService : generateTaxiStats(filters)
DashboardService -> TaxiFleet : queryTaxis(filters)
TaxiFleet -> PersistenceService : getTaxis(filters)
PersistenceService -> TaxiFleet : Collection<Taxi>
TaxiFleet -> DashboardService : Collection<Taxi>
DashboardService -> Dashboard : displayTaxiStats(Collection<Taxi>)

@enduml