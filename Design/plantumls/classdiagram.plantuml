@startuml classDigram

class Location {
    +id: Integer
    +readableName: String
    +latitude: double
    +longitude: double
}

class User {
    +id: Integer
    +name: String
}


package "Booking" {
    enum RequestStatus {
        PENDING
        REJECTED
        EXPIRED
    }

    enum TaxiResponse {
        ACCEPT
        DECLINE
    }

    class BookingRequest {
        +id: UUID
        +userID: UUID
        +pickupLocation: Location
        +dropoffLocation: Location
        +requestTime: DateTime
        +status: RequestStatus
    }

    class BookingResponse {
        +requestID: requestID
        +taxiID: UUID
        +response: TaxiResponse
    }

    enum BookingStatus {
        CONFIRMED
        ONGOING
        COMPLETED
        CANCELLED
    }

    class Booking {
        +uuid: UUID
        +request: BookingRequest
        +assignedTaxi: Taxi
        +bookingTime: DateTime
        +status: BookingStatus
    }

    BookingRequest "1" --> "0..1" Booking : "Becomes"
}

package Taxi {
    enum TaxiStatus {
        AVAILABLE
        BOOKED
        RIDING
        OFFLINE
    }

    class Taxi {
        +id: Integer
        +numberPlate: String
        +status: TaxiStatus
    }
}

package "Fleet Management System" {

    class CommunicationService {
        +notifyTaxis(taxis: Collection<Taxi>, bookingRequest: BookingRequest): void
        +notifyTaxi(booking: Booking, taxi: Taxi, user: User): void
    }
    class TaxiFleetManagement {
        +initialize(): void
        +publishBooking(booking: BookingRequest): void
        +notifyTaxis(taxis: Collection<Taxi>, bookingRequest: BookingRequest): void
        +bookTaxi(request:BookingRequest, taxi : Taxi) : void
        +processTaxiResponse(response: BookingResponse): void
    }

    interface IPersistenceService {
        +createBookingRequest(request: BookingRequest): void
        +saveBookingRequest(request: BookingRequest): void
        +getAllBookingRequests(): Collection<BookingRequest>
        +saveBooking(booking: Booking): void
        +getAllBookings(): Collection<Booking>
        +saveTaxi(taxi: Taxi): void
        +updateTaxiStatus(taxi: Taxi): void
        +getAllAvailableTaxis(): Collection<Taxi>
        +getAllTaxis(): Collection<Taxi>
        +getLocations(): Collection<Location>
        +getUsers(): Collection<User>
    }
}

@enduml
