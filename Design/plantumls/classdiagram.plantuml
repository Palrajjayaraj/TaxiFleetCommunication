@startuml classDigram

class Location {
    +latitude: double
    +longitude: double
}

class User {
    +id: Integer
    +name: String
    +requestBooking(pickup: Location, dropoff: Location): BookingRequest
    +viewBookingStatus(request: BookingRequest): void
    +cancelBooking(cancelBooking: BookingRequest): void
}

package "Booking" {
    enum RequestStatus {
        PENDING
        REJECTED
        EXPIRED
    }

    enum TaxiResponse {
        ACCEPT
        DECLINE
    }

    class BookingRequest {
        +id: Integer
        +user: User
        +pickupLocation: Location
        +dropoffLocation: Location
        +requestTime: DateTime
        +status: RequestStatus
    }

    class BookingResponse {
        +id: requestID
        +response: TaxiResponse
    }

    enum BookingStatus {
        CONFIRMED
        ONGOING
        COMPLETED
        CANCELLED
    }

    class Booking {
        +id: Integer
        +request: BookingRequest
        +assignedTaxi: Taxi
        +bookingTime: DateTime
        +status: BookingStatus
        +assignTaxi(taxi: Taxi): void
        +cancel(): void
        +complete(): double
        +calculateFare(): double
        +updateStatus(newStatus: BookingStatus): void
    }

    BookingRequest "1" --> "0..1" Booking : "Becomes"
}

package Taxi {
    enum TaxiStatus {
        AVAILABLE
        BOOKED
        BOOKED_OFFLINE
        OFFLINE
    }

    class Taxi {
        +id: Integer
        +numberPlate: String
        +status: TaxiStatus
        +updateStatus(): void
        +getCurrentLocation(): Location
        +respondToBooking(request: BookingRequest): TaxiResponse
    }
}

package "Fleet Management" {
    class Filter {
        +apply(item: T): Boolean
    }

    class BookingCenter {
        +publishBooking(booking: BookingRequest): void
        +queryBooking(filters: Collection<Filter<Booking>>): Collection<Booking>
        +handleTaxiResponse(response: BookingResponse): void
    }

    class TaxiFleet {
        +queryTaxis(filters: Collection<Filter<Taxi>>): Collection<Taxi>
        +getAvailableTaxis(): List<Taxi>
        +updateTaxiStatus(taxi: Taxi): void
    }

    class CommunicationService {
        +publishBookingRequest(request: BookingRequest): void
        +notifyTaxis(taxis: List<Taxi>, bookingRequest: BookingRequest): void
        +getLocation(taxi:Taxi): Location
        +getTaxiStatus(taxi: Taxi): TaxiStatus
    }

    class DashboardService {
        +generateBookingStats(filters: Collection<Filter<Booking>>): Collection<Booking>
        +generateTaxiStats(filters: Collection<Filter<Taxi>>): Collection<Taxi>
    }

    class Dashboard {
        +renderInitialDashboard(): void
        +displayBookingStats(bookingData: Collection<Booking>): void
        +displayTaxiStats(taxiData: Collection<Taxi>): void
    }

    class PersistenceService {
        +saveBookingRequest(request: BookingRequest): void
        +getBookingRequests(filters: Collection<Filter<BookingRequest>>): Collection<BookingRequest>
        +saveBooking(booking: Booking): void
        +getBookings(filters: Collection<Filter<Booking>>): Collection<Booking>
        +saveTaxi(taxi: Taxi): void
        +updateTaxiStatus(taxi: Taxi): void
        +getTaxis(filters: Collection<Filter<Taxi>>): Collection<Taxi>
    }
}

@enduml
