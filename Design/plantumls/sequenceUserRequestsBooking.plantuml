@startuml userRequestsBooking

actor User
participant "BookingCenter" as BC
participant "TaxiFleet" as TF
participant "CommunicationService" as CS
participant "Taxi" as Taxi
participant "PersistenceService" as PS

User -> BC : requestBooking(pickup, dropoff)
BC -> BC : create BookingRequest
BC -> PS : save(BookingRequest)
note right of BC : Asynchronous Task
BC -> TF : AvailableTaxis()
TF -> PS : retrieveAvailableTaxis()
PS -> TF : return AvailableTaxis
TF -> BC : return AvailableTaxis
BC -> CS : notifyTaxis(AvailableTaxis, BookingRequest)
CS -> Taxi : publishBookingRequest(BookingRequest)
alt No taxis accept the request
    Taxi -> CS : respondToBooking(REJECT)
    CS -> BC : handleTaxiResponse(REJECT)
    loop Handle all taxi responses
        CS -> BC : handleTaxiResponse(REJECT)
    end
    BC -> User : notify("No taxis available")
else Some taxis accept the request
    Taxi -> CS : respondToBooking(ACCEPT)
    CS -> BC : handleTaxiResponse(ACCEPT)
    loop Handle all taxi responses
        CS -> BC : handleTaxiResponse(ACCEPT)
        BC -> BC : createBooking
        BC -> PS : saveBooking(Booking)
        note right of BC : Asynchronous Task
    end
    BC -> User : notify("Booking confirmed")
end

@enduml